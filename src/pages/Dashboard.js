import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { db, auth } from '../services/firebase';
import { useTranslation } from 'react-i18next';
import { doc, getDoc } from 'firebase/firestore';

const Dashboard = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userName, setUserName] = useState('');
  const [upcomingAppointments, setUpcomingAppointments] = useState([]);
  const [notifications, setNotifications] = useState([]);
  
  // Mock data
  const mockUpcomingAppointments = [
    {
      id: 'apt1',
      doctorName: '‡§°‡•â. ‡§Ö‡§Æ‡§ø‡§§‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ',
      specialty: '‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û',
      date: '2023-12-15',
      time: '10:30',
      type: '‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂'
    }
  ];
  
  const mockNotifications = [
    {
      id: 'notif1',
      title: '‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§ó‡§≤‡§æ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§≤ ‡§π‡•à',
      description: '‡§°‡•â. ‡§Ö‡§Æ‡§ø‡§§‡§æ ‡§∂‡§∞‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™‡§ï‡§æ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§≤ ‡§∏‡•Å‡§¨‡§π 10:30 ‡§¨‡§ú‡•á ‡§π‡•à‡•§',
      type: 'appointment',
      read: false,
      date: '2023-12-14'
    },
    {
      id: 'notif2',
      title: '‡§®‡§Ø‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§µ‡§ø‡§∞',
      description: '‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç 20 ‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞ ‡§ï‡•ã ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§µ‡§ø‡§∞ ‡§Ü‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§',
      type: 'camp',
      read: true,
      date: '2023-12-10'
    }
  ];
  
  // Health tips
  const healthTips = [
    {
      id: 'tip1',
      title: '‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§Ü‡§π‡§æ‡§∞',
      description: '‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§®‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ ‡§´‡§≤, ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡§æ‡§Ç, ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§',
      icon: 'üçé'
    },
    {
      id: 'tip2',
      title: '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡•á ‡§´‡§æ‡§Ø‡§¶‡•á',
      description: '‡§π‡§≤‡•ç‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§Ü‡§™‡§ï‡•á ‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§î‡§∞ ‡§Æ‡§æ‡§®‡§∏‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§',
      icon: 'üèÉ‚Äç‚ôÄÔ∏è'
    },
    {
      id: 'tip3',
      title: '‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ',
      description: '7-8 ‡§ò‡§Ç‡§ü‡•á ‡§ï‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§®‡•Ä‡§Ç‡§¶ ‡§Ü‡§™‡§ï‡•á ‡§á‡§Æ‡•ç‡§Ø‡•Ç‡§® ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•ã ‡§Æ‡§ú‡§¨‡•Ç‡§§ ‡§¨‡§®‡§æ‡§§‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§§‡§®‡§æ‡§µ ‡§ï‡•ã ‡§ï‡§Æ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§',
      icon: 'üò¥'
    }
  ];
  
  // Quick access features
  const quickAccessFeatures = [
    {
      id: 'feature1',
      title: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂',
      description: '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§≤‡•á‡§Ç',
      icon: 'üë©‚Äç‚öïÔ∏è',
      link: '/doctors'
    },
    {
      id: 'feature2',
      title: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§µ‡§ø‡§∞',
      description: '‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∂‡§ø‡§µ‡§ø‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
      icon: 'üè•',
      link: '/health-camps'
    },
    {
      id: 'feature3',
      title: '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø',
      description: '‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞ ‡§î‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ü‡§ø‡§™‡•ç‡§∏',
      icon: 'üë©‚Äçüçº',
      link: '/womens-health'
    },
    {
      id: 'feature4',
      title: '‡§Æ‡•á‡§∞‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤',
      description: '‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
      icon: 'üë§',
      link: '/profile'
    },
    {
      id: 'feature5',
      title: '‡§à-‡§™‡§∞‡•ç‡§ö‡§ø‡§Ø‡§æ‡§Å',
      description: '‡§Ö‡§™‡§®‡•Ä ‡§∏‡§≠‡•Ä ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§™‡§∞‡•ç‡§ö‡§ø‡§Ø‡§æ‡§Å ‡§¶‡•á‡§ñ‡•á‡§Ç',
      icon: 'üíä',
      link: '/prescriptions'
    },
    {
      id: 'feature6',
      title: '‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂',
      description: '‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•â‡§≤ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç',
      icon: 'üìπ',
      link: '/video-consultation'
    }
  ];
  
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        setLoading(true);
        
        // Check if user is logged in
        // const currentUser = auth.currentUser;
        // if (!currentUser) {
        //   navigate('/auth');
        //   return;
        // }
        
        // In a real app, we would fetch from Firestore
        // const userDoc = await getDoc(doc(db, 'users', currentUser.uid));
        // if (userDoc.exists()) {
        //   setUserName(userDoc.data().name);
        // }
        
        // For demo, use mock data
        setUserName('‡§∏‡§∞‡§ø‡§§‡§æ ‡§¶‡•á‡§µ‡•Ä');
        setUpcomingAppointments(mockUpcomingAppointments);
        setNotifications(mockNotifications);
        
        setLoading(false);
        
      } catch (error) {
        console.error('Error fetching user data:', error);
        setError('‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®: ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§');
        setLoading(false);
      }
    };
    
    fetchUserData();
  }, [navigate]);
  
  const handleSignOut = async () => {
    try {
      await auth.signOut();
      navigate('/auth');
    } catch (error) {
      console.error('Error signing out:', error);
      setError('‡§≤‡•â‡§ó‡§Ü‡§â‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®: ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§');
    }
  };
  
  if (loading) {
    return <div className="loading">‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...</div>;
  }
  
  if (error) {
    return <div className="error-container">{error}</div>;
  }
  
  return (
    <div className="dashboard-page">
      <div className="container">
        <div className="dashboard-header">
          <h1 className="greeting">‡§®‡§Æ‡§∏‡•ç‡§§‡•á, {userName}! üôè</h1>
          <p className="welcome-message">‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à</p>
        </div>
        
        {/* Quick Access Section */}
        <section className="dashboard-section">
          <h2 className="section-title">{t('quick_access')}</h2>
          <div className="features-grid">
            {quickAccessFeatures.map(feature => (
              <Link to={feature.link} key={feature.id} className="feature-card">
                <div className="feature-icon">{feature.icon}</div>
                <h3 className="feature-title">{feature.title}</h3>
                <p className="feature-description">{feature.description}</p>
              </Link>
            ))}
          </div>
        </section>
        
        {/* Upcoming Appointments Section */}
        <section className="dashboard-section">
          <div className="section-header">
            <h2 className="section-title">{t('upcoming_appointments')}</h2>
            <Link to="/doctors" className="btn btn-outline btn-sm">
              ‡§®‡§Ø‡§æ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂
            </Link>
          </div>
          
          <div className="appointments-container">
            {upcomingAppointments.length > 0 ? (
              upcomingAppointments.map(appointment => (
                <div key={appointment.id} className="appointment-card">
                  <div className="appointment-header">
                    <span className="appointment-type">{appointment.type}</span>
                    <span className="appointment-date">
                      {new Date(appointment.date).toLocaleDateString('hi-IN')} | {appointment.time}
                    </span>
                  </div>
                  <div className="appointment-doctor">
                    <div className="doctor-avatar">
                      {appointment.doctorName.charAt(0)}
                    </div>
                    <div className="doctor-info">
                      <h3 className="doctor-name">{appointment.doctorName}</h3>
                      <p className="doctor-specialty">{appointment.specialty}</p>
                    </div>
                  </div>
                  <div className="appointment-actions">
                    <button className="btn btn-primary join-btn">
                      ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
                    </button>
                    <button className="btn btn-outline reschedule-btn">
                      ‡§∞‡§ø‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤
                    </button>
                  </div>
                </div>
              ))
            ) : (
              <div className="no-appointments">
                ‡§ï‡•ã‡§à ‡§Ü‡§ó‡§æ‡§Æ‡•Ä ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§®‡§Ø‡§æ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§®‡§Ø‡§æ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
              </div>
            )}
          </div>
        </section>
        
        {/* Health Tips Section */}
        <section className="dashboard-section">
          <h2 className="section-title">{t('health_tips')}</h2>
          <div className="health-tips-slider">
            {healthTips.map(tip => (
              <div key={tip.id} className="tip-card">
                <div className="tip-icon">{tip.icon}</div>
                <h3 className="tip-title">{tip.title}</h3>
                <p className="tip-description">{tip.description}</p>
              </div>
            ))}
          </div>
        </section>
        
        {/* Notifications Section */}
        <section className="dashboard-section">
          <h2 className="section-title">{t('notifications')}</h2>
          <div className="notifications-container">
            {notifications.length > 0 ? (
              notifications.map(notification => (
                <div 
                  key={notification.id} 
                  className={`notification-card ${!notification.read ? 'unread' : ''}`}
                >
                  <div className="notification-header">
                    <h3 className="notification-title">{notification.title}</h3>
                    <span className="notification-date">
                      {new Date(notification.date).toLocaleDateString('hi-IN')}
                    </span>
                  </div>
                  <p className="notification-description">{notification.description}</p>
                </div>
              ))
            ) : (
              <div className="no-notifications">
                ‡§ï‡•ã‡§à ‡§®‡§à ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
              </div>
            )}
          </div>
        </section>
      </div>
    </div>
  );
};

export default Dashboard; 